# Platform specific data  -------------------------------------------------------------------------
# The following variables are specific to the platform used
# and should be common to all IPS simulations on that platform.  Therefore these are
# defined in a platform specific configuration file e.g. "franklin.config" which is
# read by the framework and combined with this config file.  The path to the platform
# config file is specified on the ips command line. 
# Platform config settings can be over-ridden by uncommenting any of the lines below and
# supplying new values

#HOST = 
#MPIRUN =
# Special for DBB TSC from Franklin, since hopper.conf sets =/project/projectdirs/m876/phys-bin/phys-hopper/ 
PHYS_BIN_ROOT = /project/projectdirs/m876/phys-bin/phys
PHYS_BIN_ROOT_HOP = /project/projectdirs/m876/phys-bin/phys-hopper/ 
#DATA_TREE_ROOT =
#PORTAL_URL = 
#RUNID_URL  = 

HOME_PB = /global/homes/u/u1565

# User specific data ------------------------------------------------------------------------------
# The following data is specific to the user.  These global parameters are used later in this config 
# file to define component config parameters.  The intent is to gather user specific data into one
# place to make it easier to exchange config files between users.

USER_W3_DIR = /project/projectdirs/m876/www/dbb
USER_W3_BASEURL = http://portal.nersc.gov/project/m876/dbb


# Simulation specific data -------------------------------------------------------------------------

RUN_ID = cmod044a_toric_6modes             # Indentifier for this simulation run
TOKAMAK_ID = CMOD
SHOT_NUMBER = 001             # Identifier for specific case for this tokamak (should be character integer)

SIM_NAME =  ${RUN_ID}_${SHOT_NUMBER}

OUTPUT_PREFIX = 
LOG_FILE = ${RUN_ID}_sim.log 
LOG_LEVEL = DEBUG 

# Root of IPS component and binary tree
IPS_ROOT = /global/homes/u/u2115/ips_2_28_13
#IPS_ROOT = /global/homes/u/u2115/ips_8_27_12

# Simulation root - path of the simulation directory that will be constructed by the framework
SIM_ROOT = /scratch/scratchdirs/u2115/toric_mm/${SIM_NAME}

# Stuff for connecting to the SWIM portal
RUN_COMMENT = Testing multi-toroidal-mode TORIC component
TAG = TORIC_mm_test			# A tag that enables related runs to be retrieved together
USER = Batchelor					# Optional, if missing the unix username is used

# SIMULATION_MODE = NORMAL or RESTART.  For RESTART must specify a restart time and restart
# directory.  The restart time must coincide with a checkpoint save time.  The restart 
# directory can be specified as $SIM_ROOT if there is an existing current simulation there. 
# This will append to the current simulation

SIMULATION_MODE = NORMAL
RESTART_TIME =
RESTART_ROOT = $SIM_ROOT

# Where to put plasma state files as the simulation evolves
PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state

# Config variables defining simulation specific names for plasma state files
CURRENT_STATE = ${SIM_NAME}_ps.cdf
PRIOR_STATE = ${SIM_NAME}_psp.cdf
NEXT_STATE = ${SIM_NAME}_psn.cdf
CURRENT_EQDSK = ${SIM_NAME}_ps.geq
CURRENT_CQL = ${SIM_NAME}_ps_CQL.dat
CURRENT_DQL = ${SIM_NAME}_ps_DQL.nc
CURRENT_JSDSK = ${SIM_NAME}_ps.jso

# List of files that constitute the plasma state
PLASMA_STATE_FILES1 = $CURRENT_STATE $PRIOR_STATE  $NEXT_STATE 
PLASMA_STATE_FILES2 = $PLASMA_STATE_FILES1  $CURRENT_EQDSK  $CURRENT_JSDSK $CURRENT_DQL
PLASMA_STATE_FILES = $PLASMA_STATE_FILES2 

# Names of ports to be used in this simulation.  
# An implementation and configuration must be specified for each port.

[PORTS]
   #NAMES = INIT DRIVER MONITOR EPA RF_IC RF_LH FP
   NAMES = INIT DRIVER MONITOR EPA RF_IC

# Required ports - DRIVER and INIT   
   [[DRIVER]]
      IMPLEMENTATION = GENERIC_DRIVER 

   [[INIT]]
      IMPLEMENTATION = minimal_state_init 

# Physics ports

  [[RF_IC]]
#      IMPLEMENTATION = model_RF_IC 
#     IMPLEMENTATION = rf_aorsa 
      IMPLEMENTATION = rf_toric                       # FLR wave code component     

  [[RF_LH]]
      IMPLEMENTATION = rf_genray 

  [[FP]]
      IMPLEMENTATION = CQL3D
#     IMPLEMENTATION = minority_model_FP

   [[EPA]]
      IMPLEMENTATION = model_EPA

   [[NB]]
      IMPLEMENTATION = NUBEAM
           
   [[MONITOR]]
      IMPLEMENTATION = monitor_comp_4   

# Individual configuration sections

# Component configuration (entries similar for all components)
# NAME entry MUST match the name of the python class that implements the component

[minimal_state_init]
    CLASS = minimal_state_init
    SUB_CLASS = dbb
    NAME = minimal_state_init
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = $CURRENT_STATE
        RESTART_FILES = $PLASMA_STATE_FILES
    SCRIPT = $BIN_PATH/minimal_state_init.py

[GENERIC_DRIVER]
    CLASS = drivers
    SUB_CLASS = dbb
    NAME = generic_driver 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = 
        RESTART_FILES =
#        PLASMA_STATE_FILES = $CURRENT_STATE $PRIOR_STATE
    SCRIPT = $BIN_PATH/generic_driver.py
  
  [model_EPA]
    CLASS = epa
    SUB_CLASS = model_epa
    NAME = model_EPA
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $DATA_TREE_ROOT/model_epa/CMOD/cmod044a_genray_cql3d_toric_001
        INPUT_STATE_FILE = cmod044a_genray_cql3d_toric_001_ps.cdf
        INPUT_EQDSK_FILE = cmod044a_genray_cql3d_toric_001_ps.geq 
        INPUT_FILES = model_epa_input.nml $INPUT_STATE_FILE $INPUT_EQDSK_FILE
        OUTPUT_FILES = internal_state_data.nml
        PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK
        RESTART_FILES = $INPUT_FILES internal_state_data.nml
    SCRIPT = $BIN_PATH/model_epa_ps_file_init.py
       
[TSC]
    CLASS = epa
    SUB_CLASS = 
    NAME = tsc
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
#   Per Jin Chen Email to BH, 120206 (BH copied files to this area)
    TSC_BIN = $PHYS_BIN_ROOT/tsc/bin/tlsc_020912
#   Per Jin Chen Email to PTB on 09-06-2012
#   TSC_BIN =/scratch/scratchdirs/jinchen/tsc_run/tsc_data_pppl/tlsc_082312
#   INPUT_DIR = $DATA_TREE_ROOT/tsc/CMOD/cmod044a  
    INPUT_DIR = $HOME_PB/IPS_WORK/CMOD_TSC_LH/cmod044a_hop_genray_cql3d_toric
    YEAR = 2012
#    INPUT_SUFFIX = cmod044a.genray [Evidently ps%eqdsk_file derived from this. BH]
    INPUT_SUFFIX = $SIM_NAME
    INPUT_FILES = input.$INPUT_SUFFIX input.lhh wall_data
    OUTPUT_FILES = output.$INPUT_SUFFIX input.$INPUT_SUFFIX log.tsc tsc.cgm.$INPUT_SUFFIX
    PLASMA_STATE_FILES = $CURRENT_STATE $PRIOR_STATE $NEXT_STATE $CURRENT_EQDSK $CURRENT_JSDSK
    RESTART_FILES = $INPUT_FILES sprsin.$INPUT_SUFFIX
    SCRIPT = $IPS_ROOT/bin/epa_tsc_mcmd.py

[model_RF_IC]
    CLASS = rf
    SUB_CLASS = model_RF_IC
    NAME = model_RF_IC 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = model_RF_IC_input.nml
        OUTPUT_FILES =
    SCRIPT = $BIN_PATH/model_RF_IC.py

[rf_genray]
    CLASS = rf
    SUB_CLASS = genray
    NAME = genray_LH
    NPROC = 1
    RFMODE = LH
    ISOURCE_STRING = 1
    GENRAYNML = genray.in_LH4030_CMOD_spectra
    ADJ_READ = disabled
    PS_ADD_NML = disabled
    BIN_PATH = $IPS_ROOT/bin
    GENRAY_BIN = $PHYS_BIN_ROOT/genray/bin/xgenray
    INPUT_DIR =  $HOME_PB/IPS_WORK/CMOD_TSC_LH/cmod044a_hop_genray_cql3d_toric
        INPUT_SUFFIX = LH4030_CMOD_spectra
        INPUT_FILES = genray.in_LH4030_CMOD_spectra
    OUTPUT_FILES = genray.in log.genray 
    PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK $CURRENT_DQL
    RESTART_FILES = $INPUT_FILES
    SCRIPT = $BIN_PATH/rf_genray_LH.py
    
[rf_aorsa]
    CLASS = rf_ic 
    SUB_CLASS = 
    NAME =  aorsa
    NPROC = 1024
    #  the PHYS_BIN_ROOT is machine specific and will be supplied by a machine
    #  config file ultimately in the framework init
    BIN_PATH = $IPS_ROOT/bin
    AORSA_BIN = $PHYS_BIN_ROOT/aorsa2d/bin/xaorsa2d
    INPUT_DIR = $IPS_ROOT/components/rf/aorsa/ITER
        INPUT_FILES = grfont.dat ZTABLE.TXT aorsa2d.in_ref iter_aorsa.in_map_1024_128_I09030
        OUTPUT_FILES = out15 aorsa2d.ps log.arosa out_swim 
    SCRIPT = $BIN_PATH/rf_ic_aorsa.py

[rf_toric]
    CLASS = rf
    SUB_CLASS = ic
    NAME = toric
    MPIRUN = aprun                                     # How are MPI jobs launched (interactively)
    NPROC = 64 
    BIN_PATH = $IPS_ROOT/bin 
    TORIC_BIN = /project/projectdirs/m876/phys-bin/phys-hopper/toric/bin/Ptoric.e 
    GEQXPL_BIN = /project/projectdirs/m876/phys-bin/phys-hopper/toric/bin/geqxpl
#    INPUT_DIR =  $HOME_PB/IPS_WORK/CMOD_TSC_LH/cmod044a_hop_genray_cql3d_toric
    INPUT_DIR = $DATA_TREE_ROOT/toric/CMOD/cmod044a_genray_cql3d_toric_001 
        INPUT_FILES = machine.inp equigs_gen.ind torica.inp mdescr_namelist.dat sconfig_namelist.dat
        OUTPUT_FILES = torica.inp machine.inp log.toric toric.nc profstat.dat equigs.data equidt.data toric_cfg.nc
        PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK
        RESTART_FILES = $INPUT_FILES
#   SCRIPT = $BIN_PATH/rf_ic_toric_mcmd.py
    SCRIPT = $BIN_PATH/rf_ic_toric_nphi_mm.py

[minority_model_FP]
    CLASS = fp
    SUB_CLASS = minority_model
    NAME = minority_model_FP 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = minority_model_FP.nml
        OUTPUT_FILES =
    SCRIPT = $BIN_PATH/minority_model_FP_2.py

[CQL3D]
    CLASS = fp
    SUB_CLASS = cql3d
    NAME = cql3d
    MPIRUN = aprun                      # How are MPI jobs launched (interactively)
    NPROC = 24                            # 64 or 128 a good number for MPI runs
    CQL3D_MODE = el-only
    CQL3D_OUTPUT= LH
    NSTEPS_STR = 5
    DELTAT_STR = .0002         #SHOULD BE COORDINATED WITH [TIME LOOP] BELOW: FIX PREP CQL3D INPUT (BH).
                              #BUT, HOW DOES TIME LOOP DATA GET TO PREP CQL3D INPUT (PS, I HOPE?)
    CQL3D_NML = cqlinput_LH_template_CMOD_test
    PS_ADD_NML = disabled
    BIN_PATH = $IPS_ROOT/bin
#   CQL3D_BIN = $PHYS_BIN_ROOT/cql3d/bin/xcql3d   #Check stuff up to date.
    CQL3D_BIN = $PHYS_BIN_ROOT/cql3d/bin/xcql3d_mpi.hopper # Use mpi version of xcql3d
#   INPUT_DIR = $HOME_BH/BH_ips_runs/CMod_LH_TSC_GENRAY_CQL3D_run/toric
    INPUT_DIR =  $HOME_PB/IPS_WORK/CMOD_TSC_LH/cmod044a_hop_genray_cql3d_toric
        INPUT_SUFFIX = 
        INPUT_FILES =  cqlinput_LH_template_CMOD_test 
        #Hopefully genray.nc and distrfunc.nc left around
        #from genray and from prev cql3d run, in the working dir.
        PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK $CURRENT_DQL
        RESTART_FILES = $INPUT_FILES 
        OUTPUT_FILES = cqlinput log.cql3d   
        #.ps and .nc files need to be called out
        #here?  Not so for genray IPS runs.
    SCRIPT = $BIN_PATH/fp_cql3d_general.py

[NUBEAM]
    CLASS = nb
    SUB_CLASS =
    NAME = nubeam
    MPIRUN = aprun                                     # How are MPI jobs launched (interactively)
    NPROC = 16 
    NSTEP_INT = 1
    BIN_PATH = $IPS_ROOT/bin 
    NUBEAM_BIN = $PHYS_BIN_ROOT/nubeam/bin/mpi_nubeam_comp_exec
    NUBEAM_UPDATE_BIN = $PHYS_BIN_ROOT/nubeam/bin/update_state
    PREACT = $PHYS_BIN_ROOT/nubeam/share/PREACT
    ADAS = $PHYS_BIN_ROOT/nubeam/share/ADAS
    INPUT_DIR = $DATA_TREE_ROOT/nubeam/ITER/hy040510/t0
    INPUT_SUFFIX = 
    INPUT_FILES = nubeam_init_files.dat nubeam_step_files.dat nubeam_init_input.dat nubeam_step_input.dat
    OUTPUT_FILES = log.nubeam log.update_state state_changes.cdf
#    PLASMA_STATE_FILES = $CURRENT_STATE 
    RESTART_FILES = *.cdf *.dat nubeam_comp_exec.RUNID 
#   SCRIPT = $BIN_PATH/nb_nubeam_pll.py
    SCRIPT = $BIN_PATH/nb_nubeam_mcmd.py

[monitor_comp_4]
    CLASS = monitor
    SUB_CLASS = 
    NAME = monitor
    NPROC = 1
    W3_DIR = $USER_W3_DIR              # Note this is user specific
    W3_BASEURL = $USER_W3_BASEURL      # Note this is user specific
    TEMPLATE_FILE= basic_time_traces.xml 
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/monitor/monitor_4
    INPUT_FILES = basic_time_traces.xml 
    OUTPUT_FILES = monitor_file.nc
    PLASMA_STATE_FILES = $CURRENT_STATE
    RESTART_FILES = $INPUT_FILES monitor_restart monitor_file.nc
    SCRIPT = $BIN_PATH/monitor_comp.py

# Checkpoint schedule -----------------------------------------------------------------------------
[CHECKPOINT]
   MODE = WALLTIME_REGULAR
   WALLTIME_INTERVAL = 600
   NUM_CHECKPOINT = 2
   PROTECT_FREQUENCY = 5  

# Time loop sepecification (two modes for now) EXPLICIT | REGULAR ---------------------------------
# For MODE = REGULAR, the framework uses the variables START, FINISH, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)

[TIME_LOOP]
    MODE = REGULAR
    START = 0.533 
    FINISH = 0.533 
    NSTEP = 1