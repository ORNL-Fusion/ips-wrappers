# ======================================================================
# PLATFORM OVERRIDE SECTION
# ======================================================================

#  Hello world does not require these URLs
PORTAL_URL = http://localhost
RUNID_URL  = http://localhost

# ======================================================================
# ROOT LOCATION
# ======================================================================

#  Define the an environment variable for IPS base directory.
IPS_ROOT = $IPS_PATH

# ======================================================================
# SIMULATION INFO SECTION
# ======================================================================

SIM_NAME = ml_train
SIM_ROOT = $PWD

LOG_FILE = log.warning

SIMULATION_MODE = NORMAL
RUN_COMMENT = This is a ml_train test case.

#  Change to "quiet" to hide output.
#  Change to "verbose" to show all output.
#OUTPUT_LEVEL = quiet
OUTPUT_LEVEL = verbose

#  Size of batch to generate.
BATCH_SIZE = 32

# ======================================================================
# STATE SECTION
# ======================================================================

STATE_WORK_DIR = $SIM_ROOT/work/plasma_state

#  Data files.
TRAINING_DATA = training_data.json
NEW_DATA = new_data.json
PREDICTION_DATA = prediction_data.json

#  NN Model.
NN_MODEL_CONFIG = model_config.json
NN_MODEL_MATRIX = param_covar_matrix.json
NN_MODEL = saved_model
ML_TRAIN_ARGS = training_args.json

CURRENT_ML_TRAIN_STATE = current_ml_train_state.zip

STATE_FILES = $CURRENT_ML_TRAIN_STATE

# ======================================================================
# Model SECTION
# ======================================================================

#  State files for the data generation workflow.
DATA_GEN_CONFIG = ips.massive_serial_runner.config
DATA_GEN_STATE = current_msr_state.zip

# ======================================================================
# Constraint SECTION
# ======================================================================

#  Path and module for contrains
MODULE_PATH = $SIM_ROOT
MODULE_NAME = constraints

# ======================================================================
# Input File SECTION
# ======================================================================

#  Input for the data generation subworkflow. This requires an ips config and
#  zipstate.
INPUT_DATA_GEN = $DATA_GEN_CONFIG $DATA_GEN_STATE

#  Inital training data set. If this is blank, the workflow will generate the
#  initial training set.
INPUT_DATA =

#  Inital NN model. This requires at the at least the model config and the
#  training arguments. Optionally, an existing model can be input as well.
INPUT_NN_MODEL = $NN_MODEL_CONFIG $ML_TRAIN_ARGS
#INPUT_NN_MODEL = $NN_MODEL_CONFIG $ML_TRAIN_ARGS $NN_MODEL

#  ML_Train can be initialized from ether a model state input or an existing
#  training state. There is currently no error checking to ensure the input
#  state is a valid state.
USER_INPUT_FILES = $INPUT_DATA_GEN $INPUT_DATA $INPUT_NN_MODEL
#USER_INPUT_FILES = $CURRENT_ML_TRAIN_STATE

# ======================================================================
# PORTS SECTION
# ======================================================================

[PORTS]

    # The order here is the order in which they are run.

    NAMES = DRIVER INIT ML_TRAIN

    # Required ports - DRIVER and INIT   

    [[DRIVER]]
        IMPLEMENTATION = ml_train_driver

    [[INIT]]
        IMPLEMENTATION = ml_train_init

    [[ML_TRAIN]]
        IMPLEMENTATION = ml_train

# ======================================================================
# COMPONENT CONFIGURATION SECTION
# ======================================================================

[ml_train_driver]
    CLASS = driver
    SUB_CLASS =
    INPUT_FILES =
    NAME = ml_train_driver
    NPROC = 1
    BIN_PATH =
    SCRIPT =
    MODULE = ml_train.ml_train_driver
    STATE_FILES = $CURRENT_ML_TRAIN_STATE
    OUTPUT_FILES = $CURRENT_ML_TRAIN_STATE

[ml_train_init]
    CLASS = workers
    SUB_CLASS =
    NAME = ml_train_init
    NPROC = 1
    BIN_PATH =
    SCRIPT =
    MODULE = ml_train.ml_train_init
    INPUT_FILES = $USER_INPUT_FILES
    STATE_FILES = $CURRENT_ML_TRAIN_STATE
    OUTPUT_FILES =

[ml_train]
    CLASS = workers
    SUB_CLASS =
    INPUT_FILES =
    NAME = ml_train
    NPROC = 1
    ML_TRAIN_EXE = $PYTHON $ML_TRAIN_INSTALL_PATH/$ML_TRAIN_INSTALL_NAME
    BIN_PATH =
    SCRIPT =
    MODULE = ml_train.ml_train
    STATE_FILES = $CURRENT_ML_TRAIN_STATE
    OUTPUT_FILES =
